
testcan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029d0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002ba8  08002ba8  00003ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bc8  08002bc8  00004014  2**0
                  CONTENTS
  4 .ARM          00000000  08002bc8  08002bc8  00004014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bc8  08002bc8  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bc8  08002bc8  00003bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002bcc  08002bcc  00003bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08002bd0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000014  08002be4  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002be4  000040f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081d3  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001731  00000000  00000000  0000c217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  0000d948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000065a  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001be8a  00000000  00000000  0000e832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008943  00000000  00000000  0002a6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1a39  00000000  00000000  00032fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4a38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021fc  00000000  00000000  000e4a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e6c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002b90 	.word	0x08002b90

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	08002b90 	.word	0x08002b90

08000218 <HAL_FDCAN_RxFifo0Callback>:
uint8_t txdata[8] ={0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88};
uint8_t rxdata[8];
uint32_t TxMailbox;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	f003 0301 	and.w	r3, r3, #1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d005      	beq.n	8000238 <HAL_FDCAN_RxFifo0Callback+0x20>
    {
        HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, rxdata);
 800022c:	4b04      	ldr	r3, [pc, #16]	@ (8000240 <HAL_FDCAN_RxFifo0Callback+0x28>)
 800022e:	4a05      	ldr	r2, [pc, #20]	@ (8000244 <HAL_FDCAN_RxFifo0Callback+0x2c>)
 8000230:	2140      	movs	r1, #64	@ 0x40
 8000232:	6878      	ldr	r0, [r7, #4]
 8000234:	f000 feb8 	bl	8000fa8 <HAL_FDCAN_GetRxMessage>
        // Process received message
    }
}
 8000238:	bf00      	nop
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	200000e4 	.word	0x200000e4
 8000244:	200000bc 	.word	0x200000bc

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024e:	f000 fae8 	bl	8000822 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000252:	f000 f877 	bl	8000344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000256:	f000 f91f 	bl	8000498 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800025a:	f000 f8bb 	bl	80003d4 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 800025e:	2201      	movs	r2, #1
 8000260:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000264:	4831      	ldr	r0, [pc, #196]	@ (800032c <main+0xe4>)
 8000266:	f001 fc6f 	bl	8001b48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 800026a:	2200      	movs	r2, #0
 800026c:	2140      	movs	r1, #64	@ 0x40
 800026e:	4830      	ldr	r0, [pc, #192]	@ (8000330 <main+0xe8>)
 8000270:	f001 fc6a 	bl	8001b48 <HAL_GPIO_WritePin>
  HAL_FDCAN_Start(&hfdcan1);
 8000274:	482f      	ldr	r0, [pc, #188]	@ (8000334 <main+0xec>)
 8000276:	f000 fe2b 	bl	8000ed0 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_FLAG_RX_FIFO0_NEW_MESSAGE, 0);
 800027a:	2200      	movs	r2, #0
 800027c:	2101      	movs	r1, #1
 800027e:	482d      	ldr	r0, [pc, #180]	@ (8000334 <main+0xec>)
 8000280:	f000 ff9a 	bl	80011b8 <HAL_FDCAN_ActivateNotification>

  TxHeader.Identifier = 0x123;
 8000284:	4b2c      	ldr	r3, [pc, #176]	@ (8000338 <main+0xf0>)
 8000286:	f240 1223 	movw	r2, #291	@ 0x123
 800028a:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 800028c:	4b2a      	ldr	r3, [pc, #168]	@ (8000338 <main+0xf0>)
 800028e:	2200      	movs	r2, #0
 8000290:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000292:	4b29      	ldr	r3, [pc, #164]	@ (8000338 <main+0xf0>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000298:	4b27      	ldr	r3, [pc, #156]	@ (8000338 <main+0xf0>)
 800029a:	2208      	movs	r2, #8
 800029c:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800029e:	4b26      	ldr	r3, [pc, #152]	@ (8000338 <main+0xf0>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80002a4:	4b24      	ldr	r3, [pc, #144]	@ (8000338 <main+0xf0>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80002aa:	4b23      	ldr	r3, [pc, #140]	@ (8000338 <main+0xf0>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80002b0:	4b21      	ldr	r3, [pc, #132]	@ (8000338 <main+0xf0>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 80002b6:	4b20      	ldr	r3, [pc, #128]	@ (8000338 <main+0xf0>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	621a      	str	r2, [r3, #32]

  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, txdata);
 80002bc:	4a1f      	ldr	r2, [pc, #124]	@ (800033c <main+0xf4>)
 80002be:	491e      	ldr	r1, [pc, #120]	@ (8000338 <main+0xf0>)
 80002c0:	481c      	ldr	r0, [pc, #112]	@ (8000334 <main+0xec>)
 80002c2:	f000 fe2d 	bl	8000f20 <HAL_FDCAN_AddMessageToTxFifoQ>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_StatusTypeDef status;
	  status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, txdata);
 80002c6:	4a1d      	ldr	r2, [pc, #116]	@ (800033c <main+0xf4>)
 80002c8:	491b      	ldr	r1, [pc, #108]	@ (8000338 <main+0xf0>)
 80002ca:	481a      	ldr	r0, [pc, #104]	@ (8000334 <main+0xec>)
 80002cc:	f000 fe28 	bl	8000f20 <HAL_FDCAN_AddMessageToTxFifoQ>
 80002d0:	4603      	mov	r3, r0
 80002d2:	71fb      	strb	r3, [r7, #7]
	  if (status == HAL_OK)	{
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d109      	bne.n	80002ee <main+0xa6>
	    flag = 1;
 80002da:	4b19      	ldr	r3, [pc, #100]	@ (8000340 <main+0xf8>)
 80002dc:	2201      	movs	r2, #1
 80002de:	701a      	strb	r2, [r3, #0]
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 80002e0:	2201      	movs	r2, #1
 80002e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002e6:	4811      	ldr	r0, [pc, #68]	@ (800032c <main+0xe4>)
 80002e8:	f001 fc2e 	bl	8001b48 <HAL_GPIO_WritePin>
 80002ec:	e008      	b.n	8000300 <main+0xb8>
	  }
	  else{
	    flag = 0;
 80002ee:	4b14      	ldr	r3, [pc, #80]	@ (8000340 <main+0xf8>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	701a      	strb	r2, [r3, #0]
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80002fa:	480c      	ldr	r0, [pc, #48]	@ (800032c <main+0xe4>)
 80002fc:	f001 fc24 	bl	8001b48 <HAL_GPIO_WritePin>
	  }


	  HAL_Delay(500);
 8000300:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000304:	f000 fafe 	bl	8000904 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800030e:	4807      	ldr	r0, [pc, #28]	@ (800032c <main+0xe4>)
 8000310:	f001 fc1a 	bl	8001b48 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800031a:	4804      	ldr	r0, [pc, #16]	@ (800032c <main+0xe4>)
 800031c:	f001 fc14 	bl	8001b48 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000320:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000324:	f000 faee 	bl	8000904 <HAL_Delay>
  {
 8000328:	e7cd      	b.n	80002c6 <main+0x7e>
 800032a:	bf00      	nop
 800032c:	48000400 	.word	0x48000400
 8000330:	48000800 	.word	0x48000800
 8000334:	20000030 	.word	0x20000030
 8000338:	20000098 	.word	0x20000098
 800033c:	20000000 	.word	0x20000000
 8000340:	20000094 	.word	0x20000094

08000344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b094      	sub	sp, #80	@ 0x50
 8000348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034a:	f107 0318 	add.w	r3, r7, #24
 800034e:	2238      	movs	r2, #56	@ 0x38
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f002 fbf0 	bl	8002b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000366:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800036a:	f001 fc05 	bl	8001b78 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800036e:	2302      	movs	r3, #2
 8000370:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000372:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000376:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000378:	2340      	movs	r3, #64	@ 0x40
 800037a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800037c:	2300      	movs	r3, #0
 800037e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000380:	f107 0318 	add.w	r3, r7, #24
 8000384:	4618      	mov	r0, r3
 8000386:	f001 fcab 	bl	8001ce0 <HAL_RCC_OscConfig>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000390:	f000 f934 	bl	80005fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000394:	230f      	movs	r3, #15
 8000396:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000398:	2301      	movs	r3, #1
 800039a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2100      	movs	r1, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f001 ffa9 	bl	8002304 <HAL_RCC_ClockConfig>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80003b8:	f000 f920 	bl	80005fc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO_PG10, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80003bc:	2200      	movs	r2, #0
 80003be:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 80003c2:	4803      	ldr	r0, [pc, #12]	@ (80003d0 <SystemClock_Config+0x8c>)
 80003c4:	f002 f8da 	bl	800257c <HAL_RCC_MCOConfig>
}
 80003c8:	bf00      	nop
 80003ca:	3750      	adds	r7, #80	@ 0x50
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	00060400 	.word	0x00060400

080003d4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80003da:	4b2d      	ldr	r3, [pc, #180]	@ (8000490 <MX_FDCAN1_Init+0xbc>)
 80003dc:	4a2d      	ldr	r2, [pc, #180]	@ (8000494 <MX_FDCAN1_Init+0xc0>)
 80003de:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80003e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000490 <MX_FDCAN1_Init+0xbc>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80003e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000490 <MX_FDCAN1_Init+0xbc>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80003ec:	4b28      	ldr	r3, [pc, #160]	@ (8000490 <MX_FDCAN1_Init+0xbc>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80003f2:	4b27      	ldr	r3, [pc, #156]	@ (8000490 <MX_FDCAN1_Init+0xbc>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80003f8:	4b25      	ldr	r3, [pc, #148]	@ (8000490 <MX_FDCAN1_Init+0xbc>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80003fe:	4b24      	ldr	r3, [pc, #144]	@ (8000490 <MX_FDCAN1_Init+0xbc>)
 8000400:	2200      	movs	r2, #0
 8000402:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000404:	4b22      	ldr	r3, [pc, #136]	@ (8000490 <MX_FDCAN1_Init+0xbc>)
 8000406:	2205      	movs	r2, #5
 8000408:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800040a:	4b21      	ldr	r3, [pc, #132]	@ (8000490 <MX_FDCAN1_Init+0xbc>)
 800040c:	2201      	movs	r2, #1
 800040e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000410:	4b1f      	ldr	r3, [pc, #124]	@ (8000490 <MX_FDCAN1_Init+0xbc>)
 8000412:	220d      	movs	r2, #13
 8000414:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000416:	4b1e      	ldr	r3, [pc, #120]	@ (8000490 <MX_FDCAN1_Init+0xbc>)
 8000418:	2202      	movs	r2, #2
 800041a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800041c:	4b1c      	ldr	r3, [pc, #112]	@ (8000490 <MX_FDCAN1_Init+0xbc>)
 800041e:	2201      	movs	r2, #1
 8000420:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000422:	4b1b      	ldr	r3, [pc, #108]	@ (8000490 <MX_FDCAN1_Init+0xbc>)
 8000424:	2201      	movs	r2, #1
 8000426:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000428:	4b19      	ldr	r3, [pc, #100]	@ (8000490 <MX_FDCAN1_Init+0xbc>)
 800042a:	2201      	movs	r2, #1
 800042c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800042e:	4b18      	ldr	r3, [pc, #96]	@ (8000490 <MX_FDCAN1_Init+0xbc>)
 8000430:	2201      	movs	r2, #1
 8000432:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000434:	4b16      	ldr	r3, [pc, #88]	@ (8000490 <MX_FDCAN1_Init+0xbc>)
 8000436:	2200      	movs	r2, #0
 8000438:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800043a:	4b15      	ldr	r3, [pc, #84]	@ (8000490 <MX_FDCAN1_Init+0xbc>)
 800043c:	2200      	movs	r2, #0
 800043e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000440:	4b13      	ldr	r3, [pc, #76]	@ (8000490 <MX_FDCAN1_Init+0xbc>)
 8000442:	2200      	movs	r2, #0
 8000444:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000446:	4812      	ldr	r0, [pc, #72]	@ (8000490 <MX_FDCAN1_Init+0xbc>)
 8000448:	f000 fb8e 	bl	8000b68 <HAL_FDCAN_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000452:	f000 f8d3 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000456:	2300      	movs	r3, #0
 8000458:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 800045a:	2300      	movs	r3, #0
 800045c:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800045e:	2302      	movs	r3, #2
 8000460:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000462:	2301      	movs	r3, #1
 8000464:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x321;
 8000466:	f240 3321 	movw	r3, #801	@ 0x321
 800046a:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 800046c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000470:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000472:	463b      	mov	r3, r7
 8000474:	4619      	mov	r1, r3
 8000476:	4806      	ldr	r0, [pc, #24]	@ (8000490 <MX_FDCAN1_Init+0xbc>)
 8000478:	f000 fcd0 	bl	8000e1c <HAL_FDCAN_ConfigFilter>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_FDCAN1_Init+0xb2>
  {
    Error_Handler();
 8000482:	f000 f8bb 	bl	80005fc <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 8000486:	bf00      	nop
 8000488:	3718      	adds	r7, #24
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	20000030 	.word	0x20000030
 8000494:	40006400 	.word	0x40006400

08000498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b08a      	sub	sp, #40	@ 0x28
 800049c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049e:	f107 0314 	add.w	r3, r7, #20
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]
 80004aa:	60da      	str	r2, [r3, #12]
 80004ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ae:	4b4f      	ldr	r3, [pc, #316]	@ (80005ec <MX_GPIO_Init+0x154>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004b2:	4a4e      	ldr	r2, [pc, #312]	@ (80005ec <MX_GPIO_Init+0x154>)
 80004b4:	f043 0304 	orr.w	r3, r3, #4
 80004b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ba:	4b4c      	ldr	r3, [pc, #304]	@ (80005ec <MX_GPIO_Init+0x154>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004be:	f003 0304 	and.w	r3, r3, #4
 80004c2:	613b      	str	r3, [r7, #16]
 80004c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004c6:	4b49      	ldr	r3, [pc, #292]	@ (80005ec <MX_GPIO_Init+0x154>)
 80004c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ca:	4a48      	ldr	r2, [pc, #288]	@ (80005ec <MX_GPIO_Init+0x154>)
 80004cc:	f043 0320 	orr.w	r3, r3, #32
 80004d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004d2:	4b46      	ldr	r3, [pc, #280]	@ (80005ec <MX_GPIO_Init+0x154>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004d6:	f003 0320 	and.w	r3, r3, #32
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80004de:	4b43      	ldr	r3, [pc, #268]	@ (80005ec <MX_GPIO_Init+0x154>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004e2:	4a42      	ldr	r2, [pc, #264]	@ (80005ec <MX_GPIO_Init+0x154>)
 80004e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ea:	4b40      	ldr	r3, [pc, #256]	@ (80005ec <MX_GPIO_Init+0x154>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f6:	4b3d      	ldr	r3, [pc, #244]	@ (80005ec <MX_GPIO_Init+0x154>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004fa:	4a3c      	ldr	r2, [pc, #240]	@ (80005ec <MX_GPIO_Init+0x154>)
 80004fc:	f043 0302 	orr.w	r3, r3, #2
 8000500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000502:	4b3a      	ldr	r3, [pc, #232]	@ (80005ec <MX_GPIO_Init+0x154>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000506:	f003 0302 	and.w	r3, r3, #2
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	4b37      	ldr	r3, [pc, #220]	@ (80005ec <MX_GPIO_Init+0x154>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000512:	4a36      	ldr	r2, [pc, #216]	@ (80005ec <MX_GPIO_Init+0x154>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800051a:	4b34      	ldr	r3, [pc, #208]	@ (80005ec <MX_GPIO_Init+0x154>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	603b      	str	r3, [r7, #0]
 8000524:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 4162 	mov.w	r1, #57856	@ 0xe200
 800052c:	4830      	ldr	r0, [pc, #192]	@ (80005f0 <MX_GPIO_Init+0x158>)
 800052e:	f001 fb0b 	bl	8001b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2140      	movs	r1, #64	@ 0x40
 8000536:	482f      	ldr	r0, [pc, #188]	@ (80005f4 <MX_GPIO_Init+0x15c>)
 8000538:	f001 fb06 	bl	8001b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000542:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000546:	f001 faff 	bl	8001b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800054a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800054e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000550:	2302      	movs	r3, #2
 8000552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000558:	2300      	movs	r3, #0
 800055a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800055c:	2300      	movs	r3, #0
 800055e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	4619      	mov	r1, r3
 8000566:	4824      	ldr	r0, [pc, #144]	@ (80005f8 <MX_GPIO_Init+0x160>)
 8000568:	f001 f96c 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9;
 800056c:	f44f 4362 	mov.w	r3, #57856	@ 0xe200
 8000570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000572:	2301      	movs	r3, #1
 8000574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057a:	2300      	movs	r3, #0
 800057c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	4619      	mov	r1, r3
 8000584:	481a      	ldr	r0, [pc, #104]	@ (80005f0 <MX_GPIO_Init+0x158>)
 8000586:	f001 f95d 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800058a:	2340      	movs	r3, #64	@ 0x40
 800058c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058e:	2301      	movs	r3, #1
 8000590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	2300      	movs	r3, #0
 8000598:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4619      	mov	r1, r3
 80005a0:	4814      	ldr	r0, [pc, #80]	@ (80005f4 <MX_GPIO_Init+0x15c>)
 80005a2:	f001 f94f 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	4619      	mov	r1, r3
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005be:	f001 f941 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80005c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	2300      	movs	r3, #0
 80005d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4619      	mov	r1, r3
 80005da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005de:	f001 f931 	bl	8001844 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005e2:	bf00      	nop
 80005e4:	3728      	adds	r7, #40	@ 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000
 80005f0:	48000400 	.word	0x48000400
 80005f4:	48000800 	.word	0x48000800
 80005f8:	48001800 	.word	0x48001800

080005fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000600:	b672      	cpsid	i
}
 8000602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <Error_Handler+0x8>

08000608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060e:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <HAL_MspInit+0x44>)
 8000610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000612:	4a0e      	ldr	r2, [pc, #56]	@ (800064c <HAL_MspInit+0x44>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6613      	str	r3, [r2, #96]	@ 0x60
 800061a:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <HAL_MspInit+0x44>)
 800061c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000626:	4b09      	ldr	r3, [pc, #36]	@ (800064c <HAL_MspInit+0x44>)
 8000628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800062a:	4a08      	ldr	r2, [pc, #32]	@ (800064c <HAL_MspInit+0x44>)
 800062c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000630:	6593      	str	r3, [r2, #88]	@ 0x58
 8000632:	4b06      	ldr	r3, [pc, #24]	@ (800064c <HAL_MspInit+0x44>)
 8000634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800063e:	f001 fb3f 	bl	8001cc0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000

08000650 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b09a      	sub	sp, #104	@ 0x68
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	2244      	movs	r2, #68	@ 0x44
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f002 fa61 	bl	8002b38 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a28      	ldr	r2, [pc, #160]	@ (800071c <HAL_FDCAN_MspInit+0xcc>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d149      	bne.n	8000714 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000680:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000684:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000686:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800068a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	4618      	mov	r0, r3
 8000692:	f002 f861 	bl	8002758 <HAL_RCCEx_PeriphCLKConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800069c:	f7ff ffae 	bl	80005fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80006a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <HAL_FDCAN_MspInit+0xd0>)
 80006a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006a4:	4a1e      	ldr	r2, [pc, #120]	@ (8000720 <HAL_FDCAN_MspInit+0xd0>)
 80006a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80006ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000720 <HAL_FDCAN_MspInit+0xd0>)
 80006ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b8:	4b19      	ldr	r3, [pc, #100]	@ (8000720 <HAL_FDCAN_MspInit+0xd0>)
 80006ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006bc:	4a18      	ldr	r2, [pc, #96]	@ (8000720 <HAL_FDCAN_MspInit+0xd0>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c4:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <HAL_FDCAN_MspInit+0xd0>)
 80006c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006d0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80006d4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d6:	2302      	movs	r3, #2
 80006d8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80006e2:	2309      	movs	r3, #9
 80006e4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006ea:	4619      	mov	r1, r3
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f0:	f001 f8a8 	bl	8001844 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	2015      	movs	r0, #21
 80006fa:	f000 fa00 	bl	8000afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80006fe:	2015      	movs	r0, #21
 8000700:	f000 fa17 	bl	8000b32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000704:	2200      	movs	r2, #0
 8000706:	2100      	movs	r1, #0
 8000708:	2016      	movs	r0, #22
 800070a:	f000 f9f8 	bl	8000afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800070e:	2016      	movs	r0, #22
 8000710:	f000 fa0f 	bl	8000b32 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000714:	bf00      	nop
 8000716:	3768      	adds	r7, #104	@ 0x68
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40006400 	.word	0x40006400
 8000720:	40021000 	.word	0x40021000

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <NMI_Handler+0x4>

0800072c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <HardFault_Handler+0x4>

08000734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <MemManage_Handler+0x4>

0800073c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <BusFault_Handler+0x4>

08000744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <UsageFault_Handler+0x4>

0800074c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077a:	f000 f8a5 	bl	80008c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000788:	4802      	ldr	r0, [pc, #8]	@ (8000794 <FDCAN1_IT0_IRQHandler+0x10>)
 800078a:	f000 fdfb 	bl	8001384 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000030 	.word	0x20000030

08000798 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800079c:	4802      	ldr	r0, [pc, #8]	@ (80007a8 <FDCAN1_IT1_IRQHandler+0x10>)
 800079e:	f000 fdf1 	bl	8001384 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000030 	.word	0x20000030

080007ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007b0:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <SystemInit+0x20>)
 80007b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007b6:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <SystemInit+0x20>)
 80007b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007d0:	480d      	ldr	r0, [pc, #52]	@ (8000808 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007d2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007d4:	f7ff ffea 	bl	80007ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d8:	480c      	ldr	r0, [pc, #48]	@ (800080c <LoopForever+0x6>)
  ldr r1, =_edata
 80007da:	490d      	ldr	r1, [pc, #52]	@ (8000810 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000814 <LoopForever+0xe>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80007e0:	e002      	b.n	80007e8 <LoopCopyDataInit>

080007e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e6:	3304      	adds	r3, #4

080007e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ec:	d3f9      	bcc.n	80007e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000818 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f0:	4c0a      	ldr	r4, [pc, #40]	@ (800081c <LoopForever+0x16>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f4:	e001      	b.n	80007fa <LoopFillZerobss>

080007f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f8:	3204      	adds	r2, #4

080007fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007fc:	d3fb      	bcc.n	80007f6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80007fe:	f002 f9a3 	bl	8002b48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000802:	f7ff fd21 	bl	8000248 <main>

08000806 <LoopForever>:

LoopForever:
    b LoopForever
 8000806:	e7fe      	b.n	8000806 <LoopForever>
  ldr   r0, =_estack
 8000808:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800080c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000810:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000814:	08002bd0 	.word	0x08002bd0
  ldr r2, =_sbss
 8000818:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800081c:	200000f0 	.word	0x200000f0

08000820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC1_2_IRQHandler>

08000822 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000828:	2300      	movs	r3, #0
 800082a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082c:	2003      	movs	r0, #3
 800082e:	f000 f95b 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000832:	200f      	movs	r0, #15
 8000834:	f000 f80e 	bl	8000854 <HAL_InitTick>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	71fb      	strb	r3, [r7, #7]
 8000842:	e001      	b.n	8000848 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000844:	f7ff fee0 	bl	8000608 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000848:	79fb      	ldrb	r3, [r7, #7]

}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800085c:	2300      	movs	r3, #0
 800085e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000860:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <HAL_InitTick+0x68>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d022      	beq.n	80008ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <HAL_InitTick+0x6c>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <HAL_InitTick+0x68>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000874:	fbb1 f3f3 	udiv	r3, r1, r3
 8000878:	fbb2 f3f3 	udiv	r3, r2, r3
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f966 	bl	8000b4e <HAL_SYSTICK_Config>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d10f      	bne.n	80008a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b0f      	cmp	r3, #15
 800088c:	d809      	bhi.n	80008a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800088e:	2200      	movs	r2, #0
 8000890:	6879      	ldr	r1, [r7, #4]
 8000892:	f04f 30ff 	mov.w	r0, #4294967295
 8000896:	f000 f932 	bl	8000afe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800089a:	4a0a      	ldr	r2, [pc, #40]	@ (80008c4 <HAL_InitTick+0x70>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	e007      	b.n	80008b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]
 80008a6:	e004      	b.n	80008b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008a8:	2301      	movs	r3, #1
 80008aa:	73fb      	strb	r3, [r7, #15]
 80008ac:	e001      	b.n	80008b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000010 	.word	0x20000010
 80008c0:	20000008 	.word	0x20000008
 80008c4:	2000000c 	.word	0x2000000c

080008c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008cc:	4b05      	ldr	r3, [pc, #20]	@ (80008e4 <HAL_IncTick+0x1c>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b05      	ldr	r3, [pc, #20]	@ (80008e8 <HAL_IncTick+0x20>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a03      	ldr	r2, [pc, #12]	@ (80008e4 <HAL_IncTick+0x1c>)
 80008d8:	6013      	str	r3, [r2, #0]
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	200000ec 	.word	0x200000ec
 80008e8:	20000010 	.word	0x20000010

080008ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return uwTick;
 80008f0:	4b03      	ldr	r3, [pc, #12]	@ (8000900 <HAL_GetTick+0x14>)
 80008f2:	681b      	ldr	r3, [r3, #0]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	200000ec 	.word	0x200000ec

08000904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800090c:	f7ff ffee 	bl	80008ec <HAL_GetTick>
 8000910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800091c:	d004      	beq.n	8000928 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800091e:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <HAL_Delay+0x40>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	4413      	add	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000928:	bf00      	nop
 800092a:	f7ff ffdf 	bl	80008ec <HAL_GetTick>
 800092e:	4602      	mov	r2, r0
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	68fa      	ldr	r2, [r7, #12]
 8000936:	429a      	cmp	r2, r3
 8000938:	d8f7      	bhi.n	800092a <HAL_Delay+0x26>
  {
  }
}
 800093a:	bf00      	nop
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000010 	.word	0x20000010

08000948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000958:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000964:	4013      	ands	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000970:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097a:	4a04      	ldr	r2, [pc, #16]	@ (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	60d3      	str	r3, [r2, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000994:	4b04      	ldr	r3, [pc, #16]	@ (80009a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	f003 0307 	and.w	r3, r3, #7
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	db0b      	blt.n	80009d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	f003 021f 	and.w	r2, r3, #31
 80009c4:	4907      	ldr	r1, [pc, #28]	@ (80009e4 <__NVIC_EnableIRQ+0x38>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	095b      	lsrs	r3, r3, #5
 80009cc:	2001      	movs	r0, #1
 80009ce:	fa00 f202 	lsl.w	r2, r0, r2
 80009d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000e100 	.word	0xe000e100

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	490c      	ldr	r1, [pc, #48]	@ (8000a34 <__NVIC_SetPriority+0x4c>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4908      	ldr	r1, [pc, #32]	@ (8000a38 <__NVIC_SetPriority+0x50>)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	@ 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43d9      	mvns	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	4313      	orrs	r3, r2
         );
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3724      	adds	r7, #36	@ 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ab4:	d301      	bcc.n	8000aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00f      	b.n	8000ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <SysTick_Config+0x40>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f7ff ff8e 	bl	80009e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000acc:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <SysTick_Config+0x40>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <SysTick_Config+0x40>)
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff29 	bl	8000948 <__NVIC_SetPriorityGrouping>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b0c:	f7ff ff40 	bl	8000990 <__NVIC_GetPriorityGrouping>
 8000b10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	6978      	ldr	r0, [r7, #20]
 8000b18:	f7ff ff90 	bl	8000a3c <NVIC_EncodePriority>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff5f 	bl	80009e8 <__NVIC_SetPriority>
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff33 	bl	80009ac <__NVIC_EnableIRQ>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ffa4 	bl	8000aa4 <SysTick_Config>
 8000b5c:	4603      	mov	r3, r0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d101      	bne.n	8000b7a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e147      	b.n	8000e0a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d106      	bne.n	8000b94 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff fd5e 	bl	8000650 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	699a      	ldr	r2, [r3, #24]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f022 0210 	bic.w	r2, r2, #16
 8000ba2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ba4:	f7ff fea2 	bl	80008ec <HAL_GetTick>
 8000ba8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000baa:	e012      	b.n	8000bd2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000bac:	f7ff fe9e 	bl	80008ec <HAL_GetTick>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	2b0a      	cmp	r3, #10
 8000bb8:	d90b      	bls.n	8000bd2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bbe:	f043 0201 	orr.w	r2, r3, #1
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2203      	movs	r2, #3
 8000bca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e11b      	b.n	8000e0a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f003 0308 	and.w	r3, r3, #8
 8000bdc:	2b08      	cmp	r3, #8
 8000bde:	d0e5      	beq.n	8000bac <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	699a      	ldr	r2, [r3, #24]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f042 0201 	orr.w	r2, r2, #1
 8000bee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bf0:	f7ff fe7c 	bl	80008ec <HAL_GetTick>
 8000bf4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000bf6:	e012      	b.n	8000c1e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000bf8:	f7ff fe78 	bl	80008ec <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	2b0a      	cmp	r3, #10
 8000c04:	d90b      	bls.n	8000c1e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c0a:	f043 0201 	orr.w	r2, r3, #1
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2203      	movs	r2, #3
 8000c16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e0f5      	b.n	8000e0a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d0e5      	beq.n	8000bf8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	699a      	ldr	r2, [r3, #24]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f042 0202 	orr.w	r2, r2, #2
 8000c3a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a74      	ldr	r2, [pc, #464]	@ (8000e14 <HAL_FDCAN_Init+0x2ac>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d103      	bne.n	8000c4e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000c46:	4a74      	ldr	r2, [pc, #464]	@ (8000e18 <HAL_FDCAN_Init+0x2b0>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	7c1b      	ldrb	r3, [r3, #16]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d108      	bne.n	8000c68 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	699a      	ldr	r2, [r3, #24]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000c64:	619a      	str	r2, [r3, #24]
 8000c66:	e007      	b.n	8000c78 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	699a      	ldr	r2, [r3, #24]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000c76:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	7c5b      	ldrb	r3, [r3, #17]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d108      	bne.n	8000c92 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	699a      	ldr	r2, [r3, #24]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000c8e:	619a      	str	r2, [r3, #24]
 8000c90:	e007      	b.n	8000ca2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	699a      	ldr	r2, [r3, #24]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000ca0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	7c9b      	ldrb	r3, [r3, #18]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d108      	bne.n	8000cbc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	699a      	ldr	r2, [r3, #24]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000cb8:	619a      	str	r2, [r3, #24]
 8000cba:	e007      	b.n	8000ccc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	699a      	ldr	r2, [r3, #24]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000cca:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	699a      	ldr	r2, [r3, #24]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000cf0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	691a      	ldr	r2, [r3, #16]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f022 0210 	bic.w	r2, r2, #16
 8000d00:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d108      	bne.n	8000d1c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	699a      	ldr	r2, [r3, #24]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f042 0204 	orr.w	r2, r2, #4
 8000d18:	619a      	str	r2, [r3, #24]
 8000d1a:	e02c      	b.n	8000d76 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d028      	beq.n	8000d76 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d01c      	beq.n	8000d66 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	699a      	ldr	r2, [r3, #24]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d3a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	691a      	ldr	r2, [r3, #16]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f042 0210 	orr.w	r2, r2, #16
 8000d4a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d110      	bne.n	8000d76 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	699a      	ldr	r2, [r3, #24]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f042 0220 	orr.w	r2, r2, #32
 8000d62:	619a      	str	r2, [r3, #24]
 8000d64:	e007      	b.n	8000d76 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	699a      	ldr	r2, [r3, #24]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f042 0220 	orr.w	r2, r2, #32
 8000d74:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000d86:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a1b      	ldr	r3, [r3, #32]
 8000d8c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000d8e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000d9e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000da0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000daa:	d115      	bne.n	8000dd8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000db0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000db6:	3b01      	subs	r3, #1
 8000db8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000dba:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000dc4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000dd4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000dd6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	430a      	orrs	r2, r1
 8000dea:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 fc56 	bl	80016a0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2201      	movs	r2, #1
 8000e04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40006400 	.word	0x40006400
 8000e18:	40006500 	.word	0x40006500

08000e1c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000e2c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000e2e:	7dfb      	ldrb	r3, [r7, #23]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d002      	beq.n	8000e3a <HAL_FDCAN_ConfigFilter+0x1e>
 8000e34:	7dfb      	ldrb	r3, [r7, #23]
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d13d      	bne.n	8000eb6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d119      	bne.n	8000e76 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000e4e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	691b      	ldr	r3, [r3, #16]
 8000e54:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8000e56:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	e01d      	b.n	8000eb2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	075a      	lsls	r2, r3, #29
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	691b      	ldr	r3, [r3, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	079a      	lsls	r2, r3, #30
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	4413      	add	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e006      	b.n	8000ec4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eba:	f043 0202 	orr.w	r2, r3, #2
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
  }
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	371c      	adds	r7, #28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d110      	bne.n	8000f06 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	699a      	ldr	r2, [r3, #24]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0201 	bic.w	r2, r2, #1
 8000efa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e006      	b.n	8000f14 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f0a:	f043 0204 	orr.w	r2, r3, #4
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
  }
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d12c      	bne.n	8000f92 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000f40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d007      	beq.n	8000f58 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f4c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e023      	b.n	8000fa0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000f60:	0c1b      	lsrs	r3, r3, #16
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	68b9      	ldr	r1, [r7, #8]
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f000 fbec 	bl	800174c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2101      	movs	r1, #1
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f80:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8000f84:	2201      	movs	r2, #1
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	409a      	lsls	r2, r3
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e006      	b.n	8000fa0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f96:	f043 0208 	orr.w	r2, r3, #8
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
  }
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b08b      	sub	sp, #44	@ 0x2c
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000fc0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8000fc2:	7efb      	ldrb	r3, [r7, #27]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	f040 80e8 	bne.w	800119a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	2b40      	cmp	r3, #64	@ 0x40
 8000fce:	d137      	bne.n	8001040 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000fd8:	f003 030f 	and.w	r3, r3, #15
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d107      	bne.n	8000ff0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e0db      	b.n	80011a8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ff8:	0e1b      	lsrs	r3, r3, #24
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d10a      	bne.n	8001018 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800100a:	0a5b      	lsrs	r3, r3, #9
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b01      	cmp	r3, #1
 8001012:	d101      	bne.n	8001018 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001014:	2301      	movs	r3, #1
 8001016:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	69fa      	ldr	r2, [r7, #28]
 8001028:	4413      	add	r3, r2
 800102a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	4613      	mov	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	4413      	add	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	440b      	add	r3, r1
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
 800103e:	e036      	b.n	80010ae <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001048:	f003 030f 	and.w	r3, r3, #15
 800104c:	2b00      	cmp	r3, #0
 800104e:	d107      	bne.n	8001060 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001054:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e0a3      	b.n	80011a8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001068:	0e1b      	lsrs	r3, r3, #24
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	2b01      	cmp	r3, #1
 8001070:	d10a      	bne.n	8001088 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800107a:	0a1b      	lsrs	r3, r3, #8
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	2b01      	cmp	r3, #1
 8001082:	d101      	bne.n	8001088 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001084:	2301      	movs	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	69fa      	ldr	r2, [r7, #28]
 8001098:	4413      	add	r3, r2
 800109a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80010a0:	69fa      	ldr	r2, [r7, #28]
 80010a2:	4613      	mov	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	4413      	add	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	440b      	add	r3, r1
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80010ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d107      	bne.n	80010d2 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80010c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	0c9b      	lsrs	r3, r3, #18
 80010c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e005      	b.n	80010de <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80010d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80010de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80010ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80010f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f8:	3304      	adds	r3, #4
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80010fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	b29a      	uxth	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	0c1b      	lsrs	r3, r3, #16
 800110c:	f003 020f 	and.w	r2, r3, #15
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	0e1b      	lsrs	r3, r3, #24
 8001132:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800113a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	0fda      	lsrs	r2, r3, #31
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001146:	3304      	adds	r3, #4
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800114a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
 8001152:	e00a      	b.n	800116a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	441a      	add	r2, r3
 800115a:	6839      	ldr	r1, [r7, #0]
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	440b      	add	r3, r1
 8001160:	7812      	ldrb	r2, [r2, #0]
 8001162:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001164:	6a3b      	ldr	r3, [r7, #32]
 8001166:	3301      	adds	r3, #1
 8001168:	623b      	str	r3, [r7, #32]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	4a11      	ldr	r2, [pc, #68]	@ (80011b4 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001170:	5cd3      	ldrb	r3, [r2, r3]
 8001172:	461a      	mov	r2, r3
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	4293      	cmp	r3, r2
 8001178:	d3ec      	bcc.n	8001154 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	2b40      	cmp	r3, #64	@ 0x40
 800117e:	d105      	bne.n	800118c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800118a:	e004      	b.n	8001196 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	69fa      	ldr	r2, [r7, #28]
 8001192:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	e006      	b.n	80011a8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800119e:	f043 0208 	orr.w	r2, r3, #8
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
  }
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	372c      	adds	r7, #44	@ 0x2c
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	08002bb8 	.word	0x08002bb8

080011b8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80011ca:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80011cc:	7dfb      	ldrb	r3, [r7, #23]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d003      	beq.n	80011da <HAL_FDCAN_ActivateNotification+0x22>
 80011d2:	7dfb      	ldrb	r3, [r7, #23]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	f040 80c8 	bne.w	800136a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d004      	beq.n	80011f6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d03b      	beq.n	800126e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d004      	beq.n	800120a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d031      	beq.n	800126e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001210:	2b00      	cmp	r3, #0
 8001212:	d004      	beq.n	800121e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	2b00      	cmp	r3, #0
 800121c:	d027      	beq.n	800126e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001224:	2b00      	cmp	r3, #0
 8001226:	d004      	beq.n	8001232 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	2b00      	cmp	r3, #0
 8001230:	d01d      	beq.n	800126e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001238:	2b00      	cmp	r3, #0
 800123a:	d004      	beq.n	8001246 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	f003 0310 	and.w	r3, r3, #16
 8001242:	2b00      	cmp	r3, #0
 8001244:	d013      	beq.n	800126e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800124c:	2b00      	cmp	r3, #0
 800124e:	d004      	beq.n	800125a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	f003 0320 	and.w	r3, r3, #32
 8001256:	2b00      	cmp	r3, #0
 8001258:	d009      	beq.n	800126e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001260:	2b00      	cmp	r3, #0
 8001262:	d00c      	beq.n	800127e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800126a:	2b00      	cmp	r3, #0
 800126c:	d107      	bne.n	800127e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 0201 	orr.w	r2, r2, #1
 800127c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	2b00      	cmp	r3, #0
 8001286:	d004      	beq.n	8001292 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d13b      	bne.n	800130a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001298:	2b00      	cmp	r3, #0
 800129a:	d004      	beq.n	80012a6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d131      	bne.n	800130a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d004      	beq.n	80012ba <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d127      	bne.n	800130a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d004      	beq.n	80012ce <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d11d      	bne.n	800130a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	f003 0310 	and.w	r3, r3, #16
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d113      	bne.n	800130a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	f003 0320 	and.w	r3, r3, #32
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d109      	bne.n	800130a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00c      	beq.n	800131a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001306:	2b00      	cmp	r3, #0
 8001308:	d007      	beq.n	800131a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f042 0202 	orr.w	r2, r2, #2
 8001318:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001320:	2b00      	cmp	r3, #0
 8001322:	d009      	beq.n	8001338 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	430a      	orrs	r2, r1
 8001334:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800133e:	2b00      	cmp	r3, #0
 8001340:	d009      	beq.n	8001356 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	430a      	orrs	r2, r1
 8001352:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	430a      	orrs	r2, r1
 8001364:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e006      	b.n	8001378 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800136e:	f043 0202 	orr.w	r2, r3, #2
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
  }
}
 8001378:	4618      	mov	r0, r3
 800137a:	371c      	adds	r7, #28
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08c      	sub	sp, #48	@ 0x30
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001392:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800139e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013a0:	4013      	ands	r3, r2
 80013a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013b8:	4013      	ands	r3, r2
 80013ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80013c6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013d0:	4013      	ands	r3, r2
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013da:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80013de:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013e6:	6a3a      	ldr	r2, [r7, #32]
 80013e8:	4013      	ands	r3, r2
 80013ea:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013f2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80013f6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013fe:	69fa      	ldr	r2, [r7, #28]
 8001400:	4013      	ands	r3, r2
 8001402:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800140a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001412:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00b      	beq.n	8001436 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2240      	movs	r2, #64	@ 0x40
 800142e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 f916 	bl	8001662 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800143c:	2b00      	cmp	r3, #0
 800143e:	d019      	beq.n	8001474 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001446:	2b00      	cmp	r3, #0
 8001448:	d014      	beq.n	8001474 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001452:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800146a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800146c:	6939      	ldr	r1, [r7, #16]
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 f8d8 	bl	8001624 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001476:	2b00      	cmp	r3, #0
 8001478:	d007      	beq.n	800148a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001480:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001482:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f8a2 	bl	80015ce <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800148a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800148c:	2b00      	cmp	r3, #0
 800148e:	d007      	beq.n	80014a0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001496:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001498:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7fe febc 	bl	8000218 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80014a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d007      	beq.n	80014b6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014ac:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80014ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 f897 	bl	80015e4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00c      	beq.n	80014da <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014d2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 f890 	bl	80015fa <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d018      	beq.n	8001516 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d013      	beq.n	8001516 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014f6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	4013      	ands	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2280      	movs	r2, #128	@ 0x80
 800150c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800150e:	68f9      	ldr	r1, [r7, #12]
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 f87c 	bl	800160e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00c      	beq.n	800153a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d007      	beq.n	800153a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001532:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 f880 	bl	800163a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00c      	beq.n	800155e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d007      	beq.n	800155e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001556:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 f878 	bl	800164e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00f      	beq.n	8001588 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00a      	beq.n	8001588 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800157a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001580:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d007      	beq.n	800159e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001596:	69f9      	ldr	r1, [r7, #28]
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 f876 	bl	800168a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d009      	beq.n	80015b8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6a3a      	ldr	r2, [r7, #32]
 80015aa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015b0:	6a3b      	ldr	r3, [r7, #32]
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d002      	beq.n	80015c6 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f858 	bl	8001676 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80015c6:	bf00      	nop
 80015c8:	3730      	adds	r7, #48	@ 0x30
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80016a8:	4b27      	ldr	r3, [pc, #156]	@ (8001748 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80016aa:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016ba:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016c2:	041a      	lsls	r2, r3, #16
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016e0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016e8:	061a      	lsls	r2, r3, #24
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	e005      	b.n	800172e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	3304      	adds	r3, #4
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	429a      	cmp	r2, r3
 8001738:	d3f3      	bcc.n	8001722 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800173a:	bf00      	nop
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	4000a400 	.word	0x4000a400

0800174c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800174c:	b480      	push	{r7}
 800174e:	b089      	sub	sp, #36	@ 0x24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
 8001758:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10a      	bne.n	8001778 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800176a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001772:	4313      	orrs	r3, r2
 8001774:	61fb      	str	r3, [r7, #28]
 8001776:	e00a      	b.n	800178e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001780:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001786:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001788:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800178c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001798:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800179e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80017a4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	4613      	mov	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	4413      	add	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	440b      	add	r3, r1
 80017c0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	3304      	adds	r3, #4
 80017cc:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	3304      	adds	r3, #4
 80017d8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	e020      	b.n	8001822 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	3303      	adds	r3, #3
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	4413      	add	r3, r2
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3302      	adds	r3, #2
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	440b      	add	r3, r1
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80017f8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3301      	adds	r3, #1
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	440b      	add	r3, r1
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001806:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	440a      	add	r2, r1
 800180e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001810:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	3304      	adds	r3, #4
 800181a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	3304      	adds	r3, #4
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	4a06      	ldr	r2, [pc, #24]	@ (8001840 <FDCAN_CopyMessageToRAM+0xf4>)
 8001828:	5cd3      	ldrb	r3, [r2, r3]
 800182a:	461a      	mov	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	4293      	cmp	r3, r2
 8001830:	d3d6      	bcc.n	80017e0 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001832:	bf00      	nop
 8001834:	bf00      	nop
 8001836:	3724      	adds	r7, #36	@ 0x24
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	08002bb8 	.word	0x08002bb8

08001844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001852:	e15a      	b.n	8001b0a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2101      	movs	r1, #1
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	4013      	ands	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 814c 	beq.w	8001b04 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b01      	cmp	r3, #1
 8001876:	d005      	beq.n	8001884 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001880:	2b02      	cmp	r3, #2
 8001882:	d130      	bne.n	80018e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ba:	2201      	movs	r2, #1
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	091b      	lsrs	r3, r3, #4
 80018d0:	f003 0201 	and.w	r2, r3, #1
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d017      	beq.n	8001922 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	2203      	movs	r2, #3
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d123      	bne.n	8001976 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	08da      	lsrs	r2, r3, #3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3208      	adds	r2, #8
 8001936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800193a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	220f      	movs	r2, #15
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	691a      	ldr	r2, [r3, #16]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	08da      	lsrs	r2, r3, #3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3208      	adds	r2, #8
 8001970:	6939      	ldr	r1, [r7, #16]
 8001972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	2203      	movs	r2, #3
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0203 	and.w	r2, r3, #3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 80a6 	beq.w	8001b04 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b8:	4b5b      	ldr	r3, [pc, #364]	@ (8001b28 <HAL_GPIO_Init+0x2e4>)
 80019ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019bc:	4a5a      	ldr	r2, [pc, #360]	@ (8001b28 <HAL_GPIO_Init+0x2e4>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80019c4:	4b58      	ldr	r3, [pc, #352]	@ (8001b28 <HAL_GPIO_Init+0x2e4>)
 80019c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019d0:	4a56      	ldr	r2, [pc, #344]	@ (8001b2c <HAL_GPIO_Init+0x2e8>)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	3302      	adds	r3, #2
 80019d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	220f      	movs	r2, #15
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019fa:	d01f      	beq.n	8001a3c <HAL_GPIO_Init+0x1f8>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a4c      	ldr	r2, [pc, #304]	@ (8001b30 <HAL_GPIO_Init+0x2ec>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d019      	beq.n	8001a38 <HAL_GPIO_Init+0x1f4>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a4b      	ldr	r2, [pc, #300]	@ (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d013      	beq.n	8001a34 <HAL_GPIO_Init+0x1f0>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a4a      	ldr	r2, [pc, #296]	@ (8001b38 <HAL_GPIO_Init+0x2f4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d00d      	beq.n	8001a30 <HAL_GPIO_Init+0x1ec>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a49      	ldr	r2, [pc, #292]	@ (8001b3c <HAL_GPIO_Init+0x2f8>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d007      	beq.n	8001a2c <HAL_GPIO_Init+0x1e8>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a48      	ldr	r2, [pc, #288]	@ (8001b40 <HAL_GPIO_Init+0x2fc>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d101      	bne.n	8001a28 <HAL_GPIO_Init+0x1e4>
 8001a24:	2305      	movs	r3, #5
 8001a26:	e00a      	b.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a28:	2306      	movs	r3, #6
 8001a2a:	e008      	b.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	e006      	b.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a30:	2303      	movs	r3, #3
 8001a32:	e004      	b.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e002      	b.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	f002 0203 	and.w	r2, r2, #3
 8001a44:	0092      	lsls	r2, r2, #2
 8001a46:	4093      	lsls	r3, r2
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a4e:	4937      	ldr	r1, [pc, #220]	@ (8001b2c <HAL_GPIO_Init+0x2e8>)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a5c:	4b39      	ldr	r3, [pc, #228]	@ (8001b44 <HAL_GPIO_Init+0x300>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a80:	4a30      	ldr	r2, [pc, #192]	@ (8001b44 <HAL_GPIO_Init+0x300>)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a86:	4b2f      	ldr	r3, [pc, #188]	@ (8001b44 <HAL_GPIO_Init+0x300>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aaa:	4a26      	ldr	r2, [pc, #152]	@ (8001b44 <HAL_GPIO_Init+0x300>)
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ab0:	4b24      	ldr	r3, [pc, #144]	@ (8001b44 <HAL_GPIO_Init+0x300>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b44 <HAL_GPIO_Init+0x300>)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	@ (8001b44 <HAL_GPIO_Init+0x300>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001afe:	4a11      	ldr	r2, [pc, #68]	@ (8001b44 <HAL_GPIO_Init+0x300>)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f47f ae9d 	bne.w	8001854 <HAL_GPIO_Init+0x10>
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	48000400 	.word	0x48000400
 8001b34:	48000800 	.word	0x48000800
 8001b38:	48000c00 	.word	0x48000c00
 8001b3c:	48001000 	.word	0x48001000
 8001b40:	48001400 	.word	0x48001400
 8001b44:	40010400 	.word	0x40010400

08001b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	807b      	strh	r3, [r7, #2]
 8001b54:	4613      	mov	r3, r2
 8001b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b58:	787b      	ldrb	r3, [r7, #1]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b5e:	887a      	ldrh	r2, [r7, #2]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b64:	e002      	b.n	8001b6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b66:	887a      	ldrh	r2, [r7, #2]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d141      	bne.n	8001c0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b86:	4b4b      	ldr	r3, [pc, #300]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b92:	d131      	bne.n	8001bf8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b94:	4b47      	ldr	r3, [pc, #284]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b9a:	4a46      	ldr	r2, [pc, #280]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ba0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba4:	4b43      	ldr	r3, [pc, #268]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bac:	4a41      	ldr	r2, [pc, #260]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bb4:	4b40      	ldr	r3, [pc, #256]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2232      	movs	r2, #50	@ 0x32
 8001bba:	fb02 f303 	mul.w	r3, r2, r3
 8001bbe:	4a3f      	ldr	r2, [pc, #252]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc4:	0c9b      	lsrs	r3, r3, #18
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bca:	e002      	b.n	8001bd2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bd2:	4b38      	ldr	r3, [pc, #224]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bde:	d102      	bne.n	8001be6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f2      	bne.n	8001bcc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001be6:	4b33      	ldr	r3, [pc, #204]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bf2:	d158      	bne.n	8001ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e057      	b.n	8001ca8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bfe:	4a2d      	ldr	r2, [pc, #180]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c08:	e04d      	b.n	8001ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c10:	d141      	bne.n	8001c96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c12:	4b28      	ldr	r3, [pc, #160]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c1e:	d131      	bne.n	8001c84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c20:	4b24      	ldr	r3, [pc, #144]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c26:	4a23      	ldr	r2, [pc, #140]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c30:	4b20      	ldr	r3, [pc, #128]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c38:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c40:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2232      	movs	r2, #50	@ 0x32
 8001c46:	fb02 f303 	mul.w	r3, r2, r3
 8001c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c50:	0c9b      	lsrs	r3, r3, #18
 8001c52:	3301      	adds	r3, #1
 8001c54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c56:	e002      	b.n	8001c5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c5e:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c6a:	d102      	bne.n	8001c72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f2      	bne.n	8001c58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c72:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c7e:	d112      	bne.n	8001ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e011      	b.n	8001ca8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c84:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c94:	e007      	b.n	8001ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c96:	4b07      	ldr	r3, [pc, #28]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c9e:	4a05      	ldr	r2, [pc, #20]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ca4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	40007000 	.word	0x40007000
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	431bde83 	.word	0x431bde83

08001cc0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001cc4:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4a04      	ldr	r2, [pc, #16]	@ (8001cdc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cce:	6093      	str	r3, [r2, #8]
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40007000 	.word	0x40007000

08001ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e2fe      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d075      	beq.n	8001dea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfe:	4b97      	ldr	r3, [pc, #604]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d08:	4b94      	ldr	r3, [pc, #592]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	2b0c      	cmp	r3, #12
 8001d16:	d102      	bne.n	8001d1e <HAL_RCC_OscConfig+0x3e>
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d002      	beq.n	8001d24 <HAL_RCC_OscConfig+0x44>
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d10b      	bne.n	8001d3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d24:	4b8d      	ldr	r3, [pc, #564]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d05b      	beq.n	8001de8 <HAL_RCC_OscConfig+0x108>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d157      	bne.n	8001de8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e2d9      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d44:	d106      	bne.n	8001d54 <HAL_RCC_OscConfig+0x74>
 8001d46:	4b85      	ldr	r3, [pc, #532]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a84      	ldr	r2, [pc, #528]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e01d      	b.n	8001d90 <HAL_RCC_OscConfig+0xb0>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x98>
 8001d5e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a7e      	ldr	r2, [pc, #504]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b7c      	ldr	r3, [pc, #496]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a7b      	ldr	r2, [pc, #492]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e00b      	b.n	8001d90 <HAL_RCC_OscConfig+0xb0>
 8001d78:	4b78      	ldr	r3, [pc, #480]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a77      	ldr	r2, [pc, #476]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	4b75      	ldr	r3, [pc, #468]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a74      	ldr	r2, [pc, #464]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001d8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d013      	beq.n	8001dc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7fe fda8 	bl	80008ec <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da0:	f7fe fda4 	bl	80008ec <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	@ 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e29e      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db2:	4b6a      	ldr	r3, [pc, #424]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0xc0>
 8001dbe:	e014      	b.n	8001dea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7fe fd94 	bl	80008ec <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7fe fd90 	bl	80008ec <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	@ 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e28a      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dda:	4b60      	ldr	r3, [pc, #384]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0xe8>
 8001de6:	e000      	b.n	8001dea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d075      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df6:	4b59      	ldr	r3, [pc, #356]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e00:	4b56      	ldr	r3, [pc, #344]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	2b0c      	cmp	r3, #12
 8001e0e:	d102      	bne.n	8001e16 <HAL_RCC_OscConfig+0x136>
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d002      	beq.n	8001e1c <HAL_RCC_OscConfig+0x13c>
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d11f      	bne.n	8001e5c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e1c:	4b4f      	ldr	r3, [pc, #316]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_OscConfig+0x154>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e25d      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e34:	4b49      	ldr	r3, [pc, #292]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	061b      	lsls	r3, r3, #24
 8001e42:	4946      	ldr	r1, [pc, #280]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e48:	4b45      	ldr	r3, [pc, #276]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe fd01 	bl	8000854 <HAL_InitTick>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d043      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e249      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d023      	beq.n	8001eac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e64:	4b3d      	ldr	r3, [pc, #244]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a3c      	ldr	r2, [pc, #240]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e70:	f7fe fd3c 	bl	80008ec <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e78:	f7fe fd38 	bl	80008ec <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e232      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e8a:	4b34      	ldr	r3, [pc, #208]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e96:	4b31      	ldr	r3, [pc, #196]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	061b      	lsls	r3, r3, #24
 8001ea4:	492d      	ldr	r1, [pc, #180]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	604b      	str	r3, [r1, #4]
 8001eaa:	e01a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eac:	4b2b      	ldr	r3, [pc, #172]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001eb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7fe fd18 	bl	80008ec <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec0:	f7fe fd14 	bl	80008ec <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e20e      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ed2:	4b22      	ldr	r3, [pc, #136]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x1e0>
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ee0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d041      	beq.n	8001f72 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d01c      	beq.n	8001f30 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef6:	4b19      	ldr	r3, [pc, #100]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001efc:	4a17      	ldr	r2, [pc, #92]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f06:	f7fe fcf1 	bl	80008ec <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f0e:	f7fe fced 	bl	80008ec <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e1e7      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f20:	4b0e      	ldr	r3, [pc, #56]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0ef      	beq.n	8001f0e <HAL_RCC_OscConfig+0x22e>
 8001f2e:	e020      	b.n	8001f72 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f30:	4b0a      	ldr	r3, [pc, #40]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f36:	4a09      	ldr	r2, [pc, #36]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001f38:	f023 0301 	bic.w	r3, r3, #1
 8001f3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f40:	f7fe fcd4 	bl	80008ec <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f46:	e00d      	b.n	8001f64 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f48:	f7fe fcd0 	bl	80008ec <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d906      	bls.n	8001f64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e1ca      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f64:	4b8c      	ldr	r3, [pc, #560]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8001f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1ea      	bne.n	8001f48 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80a6 	beq.w	80020cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f80:	2300      	movs	r3, #0
 8001f82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f84:	4b84      	ldr	r3, [pc, #528]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_OscConfig+0x2b4>
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <HAL_RCC_OscConfig+0x2b6>
 8001f94:	2300      	movs	r3, #0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00d      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	4b7f      	ldr	r3, [pc, #508]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9e:	4a7e      	ldr	r2, [pc, #504]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fa6:	4b7c      	ldr	r3, [pc, #496]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb6:	4b79      	ldr	r3, [pc, #484]	@ (800219c <HAL_RCC_OscConfig+0x4bc>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d118      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fc2:	4b76      	ldr	r3, [pc, #472]	@ (800219c <HAL_RCC_OscConfig+0x4bc>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a75      	ldr	r2, [pc, #468]	@ (800219c <HAL_RCC_OscConfig+0x4bc>)
 8001fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fce:	f7fe fc8d 	bl	80008ec <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd6:	f7fe fc89 	bl	80008ec <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e183      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe8:	4b6c      	ldr	r3, [pc, #432]	@ (800219c <HAL_RCC_OscConfig+0x4bc>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d108      	bne.n	800200e <HAL_RCC_OscConfig+0x32e>
 8001ffc:	4b66      	ldr	r3, [pc, #408]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8001ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002002:	4a65      	ldr	r2, [pc, #404]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800200c:	e024      	b.n	8002058 <HAL_RCC_OscConfig+0x378>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b05      	cmp	r3, #5
 8002014:	d110      	bne.n	8002038 <HAL_RCC_OscConfig+0x358>
 8002016:	4b60      	ldr	r3, [pc, #384]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8002018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201c:	4a5e      	ldr	r2, [pc, #376]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 800201e:	f043 0304 	orr.w	r3, r3, #4
 8002022:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002026:	4b5c      	ldr	r3, [pc, #368]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8002028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202c:	4a5a      	ldr	r2, [pc, #360]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002036:	e00f      	b.n	8002058 <HAL_RCC_OscConfig+0x378>
 8002038:	4b57      	ldr	r3, [pc, #348]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203e:	4a56      	ldr	r2, [pc, #344]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002048:	4b53      	ldr	r3, [pc, #332]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204e:	4a52      	ldr	r2, [pc, #328]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8002050:	f023 0304 	bic.w	r3, r3, #4
 8002054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d016      	beq.n	800208e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002060:	f7fe fc44 	bl	80008ec <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002066:	e00a      	b.n	800207e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002068:	f7fe fc40 	bl	80008ec <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e138      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207e:	4b46      	ldr	r3, [pc, #280]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0ed      	beq.n	8002068 <HAL_RCC_OscConfig+0x388>
 800208c:	e015      	b.n	80020ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208e:	f7fe fc2d 	bl	80008ec <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7fe fc29 	bl	80008ec <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e121      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1ed      	bne.n	8002096 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020ba:	7ffb      	ldrb	r3, [r7, #31]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d105      	bne.n	80020cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c0:	4b35      	ldr	r3, [pc, #212]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c4:	4a34      	ldr	r2, [pc, #208]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 80020c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d03c      	beq.n	8002152 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d01c      	beq.n	800211a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 80020e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020e6:	4a2c      	ldr	r2, [pc, #176]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f0:	f7fe fbfc 	bl	80008ec <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020f8:	f7fe fbf8 	bl	80008ec <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e0f2      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800210a:	4b23      	ldr	r3, [pc, #140]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 800210c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0ef      	beq.n	80020f8 <HAL_RCC_OscConfig+0x418>
 8002118:	e01b      	b.n	8002152 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800211a:	4b1f      	ldr	r3, [pc, #124]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 800211c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002120:	4a1d      	ldr	r2, [pc, #116]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8002122:	f023 0301 	bic.w	r3, r3, #1
 8002126:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212a:	f7fe fbdf 	bl	80008ec <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002132:	f7fe fbdb 	bl	80008ec <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e0d5      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002144:	4b14      	ldr	r3, [pc, #80]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8002146:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1ef      	bne.n	8002132 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 80c9 	beq.w	80022ee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800215c:	4b0e      	ldr	r3, [pc, #56]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 030c 	and.w	r3, r3, #12
 8002164:	2b0c      	cmp	r3, #12
 8002166:	f000 8083 	beq.w	8002270 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d15e      	bne.n	8002230 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002172:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a08      	ldr	r2, [pc, #32]	@ (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8002178:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800217c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217e:	f7fe fbb5 	bl	80008ec <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002184:	e00c      	b.n	80021a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002186:	f7fe fbb1 	bl	80008ec <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d905      	bls.n	80021a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e0ab      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
 8002198:	40021000 	.word	0x40021000
 800219c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a0:	4b55      	ldr	r3, [pc, #340]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1ec      	bne.n	8002186 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ac:	4b52      	ldr	r3, [pc, #328]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	4b52      	ldr	r3, [pc, #328]	@ (80022fc <HAL_RCC_OscConfig+0x61c>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6a11      	ldr	r1, [r2, #32]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021bc:	3a01      	subs	r2, #1
 80021be:	0112      	lsls	r2, r2, #4
 80021c0:	4311      	orrs	r1, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80021c6:	0212      	lsls	r2, r2, #8
 80021c8:	4311      	orrs	r1, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80021ce:	0852      	lsrs	r2, r2, #1
 80021d0:	3a01      	subs	r2, #1
 80021d2:	0552      	lsls	r2, r2, #21
 80021d4:	4311      	orrs	r1, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021da:	0852      	lsrs	r2, r2, #1
 80021dc:	3a01      	subs	r2, #1
 80021de:	0652      	lsls	r2, r2, #25
 80021e0:	4311      	orrs	r1, r2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021e6:	06d2      	lsls	r2, r2, #27
 80021e8:	430a      	orrs	r2, r1
 80021ea:	4943      	ldr	r1, [pc, #268]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f0:	4b41      	ldr	r3, [pc, #260]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a40      	ldr	r2, [pc, #256]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 80021f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021fc:	4b3e      	ldr	r3, [pc, #248]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a3d      	ldr	r2, [pc, #244]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 8002202:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002206:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7fe fb70 	bl	80008ec <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002210:	f7fe fb6c 	bl	80008ec <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e066      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002222:	4b35      	ldr	r3, [pc, #212]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x530>
 800222e:	e05e      	b.n	80022ee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002230:	4b31      	ldr	r3, [pc, #196]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a30      	ldr	r2, [pc, #192]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 8002236:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800223a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7fe fb56 	bl	80008ec <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002244:	f7fe fb52 	bl	80008ec <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e04c      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002256:	4b28      	ldr	r3, [pc, #160]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002262:	4b25      	ldr	r3, [pc, #148]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	4924      	ldr	r1, [pc, #144]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 8002268:	4b25      	ldr	r3, [pc, #148]	@ (8002300 <HAL_RCC_OscConfig+0x620>)
 800226a:	4013      	ands	r3, r2
 800226c:	60cb      	str	r3, [r1, #12]
 800226e:	e03e      	b.n	80022ee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e039      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800227c:	4b1e      	ldr	r3, [pc, #120]	@ (80022f8 <HAL_RCC_OscConfig+0x618>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f003 0203 	and.w	r2, r3, #3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	429a      	cmp	r2, r3
 800228e:	d12c      	bne.n	80022ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	3b01      	subs	r3, #1
 800229c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229e:	429a      	cmp	r2, r3
 80022a0:	d123      	bne.n	80022ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d11b      	bne.n	80022ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d113      	bne.n	80022ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	3b01      	subs	r3, #1
 80022d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d109      	bne.n	80022ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022e0:	085b      	lsrs	r3, r3, #1
 80022e2:	3b01      	subs	r3, #1
 80022e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d001      	beq.n	80022ee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3720      	adds	r7, #32
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	019f800c 	.word	0x019f800c
 8002300:	feeefffc 	.word	0xfeeefffc

08002304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e11e      	b.n	800255a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800231c:	4b91      	ldr	r3, [pc, #580]	@ (8002564 <HAL_RCC_ClockConfig+0x260>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d910      	bls.n	800234c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232a:	4b8e      	ldr	r3, [pc, #568]	@ (8002564 <HAL_RCC_ClockConfig+0x260>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 020f 	bic.w	r2, r3, #15
 8002332:	498c      	ldr	r1, [pc, #560]	@ (8002564 <HAL_RCC_ClockConfig+0x260>)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233a:	4b8a      	ldr	r3, [pc, #552]	@ (8002564 <HAL_RCC_ClockConfig+0x260>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d001      	beq.n	800234c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e106      	b.n	800255a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d073      	beq.n	8002440 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b03      	cmp	r3, #3
 800235e:	d129      	bne.n	80023b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002360:	4b81      	ldr	r3, [pc, #516]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0f4      	b.n	800255a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002370:	f000 f9ac 	bl	80026cc <RCC_GetSysClockFreqFromPLLSource>
 8002374:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4a7c      	ldr	r2, [pc, #496]	@ (800256c <HAL_RCC_ClockConfig+0x268>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d93f      	bls.n	80023fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800237e:	4b7a      	ldr	r3, [pc, #488]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002392:	2b00      	cmp	r3, #0
 8002394:	d033      	beq.n	80023fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800239a:	2b00      	cmp	r3, #0
 800239c:	d12f      	bne.n	80023fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800239e:	4b72      	ldr	r3, [pc, #456]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023a6:	4a70      	ldr	r2, [pc, #448]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 80023a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023ae:	2380      	movs	r3, #128	@ 0x80
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	e024      	b.n	80023fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d107      	bne.n	80023cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023bc:	4b6a      	ldr	r3, [pc, #424]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d109      	bne.n	80023dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0c6      	b.n	800255a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023cc:	4b66      	ldr	r3, [pc, #408]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0be      	b.n	800255a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023dc:	f000 f914 	bl	8002608 <HAL_RCC_GetSysClockFreq>
 80023e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4a61      	ldr	r2, [pc, #388]	@ (800256c <HAL_RCC_ClockConfig+0x268>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d909      	bls.n	80023fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023f2:	4a5d      	ldr	r2, [pc, #372]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 80023f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023fa:	2380      	movs	r3, #128	@ 0x80
 80023fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023fe:	4b5a      	ldr	r3, [pc, #360]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f023 0203 	bic.w	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4957      	ldr	r1, [pc, #348]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 800240c:	4313      	orrs	r3, r2
 800240e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002410:	f7fe fa6c 	bl	80008ec <HAL_GetTick>
 8002414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002416:	e00a      	b.n	800242e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002418:	f7fe fa68 	bl	80008ec <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e095      	b.n	800255a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	4b4e      	ldr	r3, [pc, #312]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 020c 	and.w	r2, r3, #12
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	429a      	cmp	r2, r3
 800243e:	d1eb      	bne.n	8002418 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d023      	beq.n	8002494 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002458:	4b43      	ldr	r3, [pc, #268]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4a42      	ldr	r2, [pc, #264]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 800245e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002462:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d007      	beq.n	8002480 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002470:	4b3d      	ldr	r3, [pc, #244]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002478:	4a3b      	ldr	r2, [pc, #236]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 800247a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800247e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002480:	4b39      	ldr	r3, [pc, #228]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4936      	ldr	r1, [pc, #216]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
 8002492:	e008      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2b80      	cmp	r3, #128	@ 0x80
 8002498:	d105      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800249a:	4b33      	ldr	r3, [pc, #204]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	4a32      	ldr	r2, [pc, #200]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 80024a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002564 <HAL_RCC_ClockConfig+0x260>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d21d      	bcs.n	80024f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002564 <HAL_RCC_ClockConfig+0x260>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f023 020f 	bic.w	r2, r3, #15
 80024bc:	4929      	ldr	r1, [pc, #164]	@ (8002564 <HAL_RCC_ClockConfig+0x260>)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024c4:	f7fe fa12 	bl	80008ec <HAL_GetTick>
 80024c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024cc:	f7fe fa0e 	bl	80008ec <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e03b      	b.n	800255a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b20      	ldr	r3, [pc, #128]	@ (8002564 <HAL_RCC_ClockConfig+0x260>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d1ed      	bne.n	80024cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4917      	ldr	r1, [pc, #92]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800251a:	4b13      	ldr	r3, [pc, #76]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	490f      	ldr	r1, [pc, #60]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800252e:	f000 f86b 	bl	8002608 <HAL_RCC_GetSysClockFreq>
 8002532:	4602      	mov	r2, r0
 8002534:	4b0c      	ldr	r3, [pc, #48]	@ (8002568 <HAL_RCC_ClockConfig+0x264>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	490c      	ldr	r1, [pc, #48]	@ (8002570 <HAL_RCC_ClockConfig+0x26c>)
 8002540:	5ccb      	ldrb	r3, [r1, r3]
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	fa22 f303 	lsr.w	r3, r2, r3
 800254a:	4a0a      	ldr	r2, [pc, #40]	@ (8002574 <HAL_RCC_ClockConfig+0x270>)
 800254c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800254e:	4b0a      	ldr	r3, [pc, #40]	@ (8002578 <HAL_RCC_ClockConfig+0x274>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe f97e 	bl	8000854 <HAL_InitTick>
 8002558:	4603      	mov	r3, r0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40022000 	.word	0x40022000
 8002568:	40021000 	.word	0x40021000
 800256c:	04c4b400 	.word	0x04c4b400
 8002570:	08002ba8 	.word	0x08002ba8
 8002574:	20000008 	.word	0x20000008
 8002578:	2000000c 	.word	0x2000000c

0800257c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08c      	sub	sp, #48	@ 0x30
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8002588:	2302      	movs	r3, #2
 800258a:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800258c:	2303      	movs	r3, #3
 800258e:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800259a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	0c1b      	lsrs	r3, r3, #16
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 80025a8:	029b      	lsls	r3, r3, #10
 80025aa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	0c1b      	lsrs	r3, r3, #16
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 80025b6:	4b13      	ldr	r3, [pc, #76]	@ (8002604 <HAL_RCC_MCOConfig+0x88>)
 80025b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025ba:	2101      	movs	r1, #1
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	fa01 f303 	lsl.w	r3, r1, r3
 80025c2:	4910      	ldr	r1, [pc, #64]	@ (8002604 <HAL_RCC_MCOConfig+0x88>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	0d1b      	lsrs	r3, r3, #20
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 80025d6:	f107 0310 	add.w	r3, r7, #16
 80025da:	4619      	mov	r1, r3
 80025dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025de:	f7ff f931 	bl	8001844 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 80025e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d109      	bne.n	80025fc <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 80025e8:	4b06      	ldr	r3, [pc, #24]	@ (8002604 <HAL_RCC_MCOConfig+0x88>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025f0:	68b9      	ldr	r1, [r7, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	430b      	orrs	r3, r1
 80025f6:	4903      	ldr	r1, [pc, #12]	@ (8002604 <HAL_RCC_MCOConfig+0x88>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	608b      	str	r3, [r1, #8]
  }
}
 80025fc:	bf00      	nop
 80025fe:	3730      	adds	r7, #48	@ 0x30
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40021000 	.word	0x40021000

08002608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800260e:	4b2c      	ldr	r3, [pc, #176]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b04      	cmp	r3, #4
 8002618:	d102      	bne.n	8002620 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800261a:	4b2a      	ldr	r3, [pc, #168]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	e047      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002620:	4b27      	ldr	r3, [pc, #156]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b08      	cmp	r3, #8
 800262a:	d102      	bne.n	8002632 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800262c:	4b26      	ldr	r3, [pc, #152]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	e03e      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002632:	4b23      	ldr	r3, [pc, #140]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b0c      	cmp	r3, #12
 800263c:	d136      	bne.n	80026ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800263e:	4b20      	ldr	r3, [pc, #128]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002648:	4b1d      	ldr	r3, [pc, #116]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	3301      	adds	r3, #1
 8002654:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b03      	cmp	r3, #3
 800265a:	d10c      	bne.n	8002676 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800265c:	4a1a      	ldr	r2, [pc, #104]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	fbb2 f3f3 	udiv	r3, r2, r3
 8002664:	4a16      	ldr	r2, [pc, #88]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002666:	68d2      	ldr	r2, [r2, #12]
 8002668:	0a12      	lsrs	r2, r2, #8
 800266a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800266e:	fb02 f303 	mul.w	r3, r2, r3
 8002672:	617b      	str	r3, [r7, #20]
      break;
 8002674:	e00c      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002676:	4a13      	ldr	r2, [pc, #76]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	fbb2 f3f3 	udiv	r3, r2, r3
 800267e:	4a10      	ldr	r2, [pc, #64]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002680:	68d2      	ldr	r2, [r2, #12]
 8002682:	0a12      	lsrs	r2, r2, #8
 8002684:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002688:	fb02 f303 	mul.w	r3, r2, r3
 800268c:	617b      	str	r3, [r7, #20]
      break;
 800268e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002690:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	0e5b      	lsrs	r3, r3, #25
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	3301      	adds	r3, #1
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	e001      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026b0:	693b      	ldr	r3, [r7, #16]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	371c      	adds	r7, #28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000
 80026c4:	00f42400 	.word	0x00f42400
 80026c8:	007a1200 	.word	0x007a1200

080026cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026d2:	4b1e      	ldr	r3, [pc, #120]	@ (800274c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026dc:	4b1b      	ldr	r3, [pc, #108]	@ (800274c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	3301      	adds	r3, #1
 80026e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d10c      	bne.n	800270a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026f0:	4a17      	ldr	r2, [pc, #92]	@ (8002750 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f8:	4a14      	ldr	r2, [pc, #80]	@ (800274c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026fa:	68d2      	ldr	r2, [r2, #12]
 80026fc:	0a12      	lsrs	r2, r2, #8
 80026fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002702:	fb02 f303 	mul.w	r3, r2, r3
 8002706:	617b      	str	r3, [r7, #20]
    break;
 8002708:	e00c      	b.n	8002724 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800270a:	4a12      	ldr	r2, [pc, #72]	@ (8002754 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002712:	4a0e      	ldr	r2, [pc, #56]	@ (800274c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002714:	68d2      	ldr	r2, [r2, #12]
 8002716:	0a12      	lsrs	r2, r2, #8
 8002718:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800271c:	fb02 f303 	mul.w	r3, r2, r3
 8002720:	617b      	str	r3, [r7, #20]
    break;
 8002722:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002724:	4b09      	ldr	r3, [pc, #36]	@ (800274c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	0e5b      	lsrs	r3, r3, #25
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	3301      	adds	r3, #1
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	fbb2 f3f3 	udiv	r3, r2, r3
 800273c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800273e:	687b      	ldr	r3, [r7, #4]
}
 8002740:	4618      	mov	r0, r3
 8002742:	371c      	adds	r7, #28
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	40021000 	.word	0x40021000
 8002750:	007a1200 	.word	0x007a1200
 8002754:	00f42400 	.word	0x00f42400

08002758 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002760:	2300      	movs	r3, #0
 8002762:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002764:	2300      	movs	r3, #0
 8002766:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 8098 	beq.w	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800277a:	4b43      	ldr	r3, [pc, #268]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800277c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10d      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002786:	4b40      	ldr	r3, [pc, #256]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278a:	4a3f      	ldr	r2, [pc, #252]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800278c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002790:	6593      	str	r3, [r2, #88]	@ 0x58
 8002792:	4b3d      	ldr	r3, [pc, #244]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279e:	2301      	movs	r3, #1
 80027a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027a2:	4b3a      	ldr	r3, [pc, #232]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a39      	ldr	r2, [pc, #228]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027ae:	f7fe f89d 	bl	80008ec <HAL_GetTick>
 80027b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027b4:	e009      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b6:	f7fe f899 	bl	80008ec <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d902      	bls.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	74fb      	strb	r3, [r7, #19]
        break;
 80027c8:	e005      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027ca:	4b30      	ldr	r3, [pc, #192]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0ef      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80027d6:	7cfb      	ldrb	r3, [r7, #19]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d159      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01e      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d019      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027f8:	4b23      	ldr	r3, [pc, #140]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002802:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002804:	4b20      	ldr	r3, [pc, #128]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800280a:	4a1f      	ldr	r2, [pc, #124]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800280c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002814:	4b1c      	ldr	r3, [pc, #112]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281a:	4a1b      	ldr	r2, [pc, #108]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800281c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002820:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002824:	4a18      	ldr	r2, [pc, #96]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d016      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002836:	f7fe f859 	bl	80008ec <HAL_GetTick>
 800283a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800283c:	e00b      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283e:	f7fe f855 	bl	80008ec <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284c:	4293      	cmp	r3, r2
 800284e:	d902      	bls.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	74fb      	strb	r3, [r7, #19]
            break;
 8002854:	e006      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002856:	4b0c      	ldr	r3, [pc, #48]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0ec      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002864:	7cfb      	ldrb	r3, [r7, #19]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10b      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800286a:	4b07      	ldr	r3, [pc, #28]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800286c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002870:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002878:	4903      	ldr	r1, [pc, #12]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002880:	e008      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002882:	7cfb      	ldrb	r3, [r7, #19]
 8002884:	74bb      	strb	r3, [r7, #18]
 8002886:	e005      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002888:	40021000 	.word	0x40021000
 800288c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002890:	7cfb      	ldrb	r3, [r7, #19]
 8002892:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002894:	7c7b      	ldrb	r3, [r7, #17]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d105      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800289a:	4ba6      	ldr	r3, [pc, #664]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800289c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289e:	4aa5      	ldr	r2, [pc, #660]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028b2:	4ba0      	ldr	r3, [pc, #640]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b8:	f023 0203 	bic.w	r2, r3, #3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	499c      	ldr	r1, [pc, #624]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028d4:	4b97      	ldr	r3, [pc, #604]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028da:	f023 020c 	bic.w	r2, r3, #12
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	4994      	ldr	r1, [pc, #592]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028f6:	4b8f      	ldr	r3, [pc, #572]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	498b      	ldr	r1, [pc, #556]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00a      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002918:	4b86      	ldr	r3, [pc, #536]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800291a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	4983      	ldr	r1, [pc, #524]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800293a:	4b7e      	ldr	r3, [pc, #504]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002940:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	497a      	ldr	r1, [pc, #488]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800295c:	4b75      	ldr	r3, [pc, #468]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002962:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	4972      	ldr	r1, [pc, #456]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800297e:	4b6d      	ldr	r3, [pc, #436]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002984:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	4969      	ldr	r1, [pc, #420]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029a0:	4b64      	ldr	r3, [pc, #400]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	4961      	ldr	r1, [pc, #388]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029c2:	4b5c      	ldr	r3, [pc, #368]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	4958      	ldr	r1, [pc, #352]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d015      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029e4:	4b53      	ldr	r3, [pc, #332]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f2:	4950      	ldr	r1, [pc, #320]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a02:	d105      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a04:	4b4b      	ldr	r3, [pc, #300]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4a4a      	ldr	r2, [pc, #296]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a0e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d015      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a1c:	4b45      	ldr	r3, [pc, #276]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a22:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2a:	4942      	ldr	r1, [pc, #264]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a3a:	d105      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	4a3c      	ldr	r2, [pc, #240]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a46:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d015      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a54:	4b37      	ldr	r3, [pc, #220]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a62:	4934      	ldr	r1, [pc, #208]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a72:	d105      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a74:	4b2f      	ldr	r3, [pc, #188]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4a2e      	ldr	r2, [pc, #184]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a7e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d015      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a8c:	4b29      	ldr	r3, [pc, #164]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9a:	4926      	ldr	r1, [pc, #152]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002aaa:	d105      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aac:	4b21      	ldr	r3, [pc, #132]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4a20      	ldr	r2, [pc, #128]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ab6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d015      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad2:	4918      	ldr	r1, [pc, #96]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ade:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ae2:	d105      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae4:	4b13      	ldr	r3, [pc, #76]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4a12      	ldr	r2, [pc, #72]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d015      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002afc:	4b0d      	ldr	r3, [pc, #52]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b02:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b0a:	490a      	ldr	r1, [pc, #40]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b1a:	d105      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b1c:	4b05      	ldr	r3, [pc, #20]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4a04      	ldr	r2, [pc, #16]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b26:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b28:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000

08002b38 <memset>:
 8002b38:	4402      	add	r2, r0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d100      	bne.n	8002b42 <memset+0xa>
 8002b40:	4770      	bx	lr
 8002b42:	f803 1b01 	strb.w	r1, [r3], #1
 8002b46:	e7f9      	b.n	8002b3c <memset+0x4>

08002b48 <__libc_init_array>:
 8002b48:	b570      	push	{r4, r5, r6, lr}
 8002b4a:	4d0d      	ldr	r5, [pc, #52]	@ (8002b80 <__libc_init_array+0x38>)
 8002b4c:	4c0d      	ldr	r4, [pc, #52]	@ (8002b84 <__libc_init_array+0x3c>)
 8002b4e:	1b64      	subs	r4, r4, r5
 8002b50:	10a4      	asrs	r4, r4, #2
 8002b52:	2600      	movs	r6, #0
 8002b54:	42a6      	cmp	r6, r4
 8002b56:	d109      	bne.n	8002b6c <__libc_init_array+0x24>
 8002b58:	4d0b      	ldr	r5, [pc, #44]	@ (8002b88 <__libc_init_array+0x40>)
 8002b5a:	4c0c      	ldr	r4, [pc, #48]	@ (8002b8c <__libc_init_array+0x44>)
 8002b5c:	f000 f818 	bl	8002b90 <_init>
 8002b60:	1b64      	subs	r4, r4, r5
 8002b62:	10a4      	asrs	r4, r4, #2
 8002b64:	2600      	movs	r6, #0
 8002b66:	42a6      	cmp	r6, r4
 8002b68:	d105      	bne.n	8002b76 <__libc_init_array+0x2e>
 8002b6a:	bd70      	pop	{r4, r5, r6, pc}
 8002b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b70:	4798      	blx	r3
 8002b72:	3601      	adds	r6, #1
 8002b74:	e7ee      	b.n	8002b54 <__libc_init_array+0xc>
 8002b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b7a:	4798      	blx	r3
 8002b7c:	3601      	adds	r6, #1
 8002b7e:	e7f2      	b.n	8002b66 <__libc_init_array+0x1e>
 8002b80:	08002bc8 	.word	0x08002bc8
 8002b84:	08002bc8 	.word	0x08002bc8
 8002b88:	08002bc8 	.word	0x08002bc8
 8002b8c:	08002bcc 	.word	0x08002bcc

08002b90 <_init>:
 8002b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b92:	bf00      	nop
 8002b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b96:	bc08      	pop	{r3}
 8002b98:	469e      	mov	lr, r3
 8002b9a:	4770      	bx	lr

08002b9c <_fini>:
 8002b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9e:	bf00      	nop
 8002ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ba2:	bc08      	pop	{r3}
 8002ba4:	469e      	mov	lr, r3
 8002ba6:	4770      	bx	lr
